#This file is auto-generated by Eddex.
import sys
import settings as ss

from dexen_libs.moea.executors import (
    initialize, 
    develop,
    evaluate,
    feedback)

def main(task_name, eval_num):
    #------------------------------------------------------------------------------
    if task_name == ss.INITIALIZE_NAME:
        if ss.VERBOSE:
            print 'Initialize task creating individuals '
        initialize(genotype_meta = ss.genotype_meta, initial_pop_size = ss.POP_SIZE)
    #------------------------------------------------------------------------------
    elif task_name == ss.DEVELOP_NAME:
        if ss.VERBOSE:
            print 'Develop task processing individuals '
        from houdini_ea.wrappers import houdini_develop
        develop(func = houdini_develop, 
            hip_file_name = ss.HIP_FILE_NAME, 
            in_path = ss.DEVELOP_IN_PATH, 
            out_path = ss.DEVELOP_OUT_PATH, 
            animate = ss.DEVELOP_ANIM)
    #------------------------------------------------------------------------------
    elif task_name == ss.EVALUATE_NAME:
        if ss.VERBOSE:
            print 'Evaluate area task processing individuals. '
        from houdini_ea.wrappers import houdini_evaluate
        evaluate(func = houdini_evaluate, 
            hip_file_name = ss.HIP_FILE_NAME, 
            in_path = ss.EVALUATE_IN_PATHS[eval_num], 
            out_path = ss.EVALUATE_OUT_PATHS[eval_num], 
            score_names = ss.EVALUATE_SCORE_NAMES[eval_num], 
            animate = ss.EVALUATE_ANIMS[eval_num])
    #------------------------------------------------------------------------------
    elif task_name == ss.FEEDBACK_NAME:
        if ss.VERBOSE:
            print 'Feedback task processing individuals '
        feedback(
            genotype_meta = ss.genotype_meta,
            scores_meta = ss.scores_meta,
            fitness_type = ss.FITNESS_TYPE, 
            births_select_type = ss.BIRTHS_SELECT_TYPE, 
            deaths_select_type = ss.DEATHS_SELECT_TYPE, 
            num_births = ss.NUM_BIRTHS,  
            num_deaths = ss.NUM_DEATHS,  
            mutation_prob = ss.MUTATION_PROB,  
            crossover_prob = ss.CROSSOVER_PROB)

if __name__ == '__main__':
    try:
        sys.argv[1]
    except NameError:
        print 'Missing command line arg; you need to specify the task name.'
        raise
    else:
        task_name = sys.argv[1]
        eval_num = None
        if len(sys.argv) > 2:
            eval_num = int(sys.argv[2])
        main(task_name, eval_num)

