#This file is auto-generated by Eddex.
import os
from time import gmtime, strftime
from dexen_libs.api import server_api, data_api
import settings as ss

#DEXEN CONSTANTS
USERNAME  = 'user'
PASSWORD  = 'pswd'
DEXEN_URL  = 'localhost'
DEXEN_PORT  = '5000'

DEBUG = True
def log(s):
    if DEBUG:
        print s

def main():

    print 'Connect to server'
    server = server_api.ServerAPI(username=USERNAME, password=PASSWORD, url=DEXEN_URL, port=DEXEN_PORT)
    assert isinstance(server, server_api.ServerAPI)
    
    print 'Created job'
    job_name = 'Job_'+strftime('%H_%M_%S', gmtime())
    job = server.create_job(job_name)
    assert isinstance(job, server_api.JobAPI)
    print 'Job name = ' + job_name
    
    print 'Upload files'
    job.upload(os.path.join(ss.CODE_FOLDER_PATH, 'tasks.py'))
    job.upload(os.path.join(ss.CODE_FOLDER_PATH, 'settings.py'))
    job.upload(ss.HIP_FILE_PATH)

    print 'Initialize task'
    initialize_task = data_api.EventTask(
        name = ss.INITIALIZE_NAME,
        cmd_args = ss.INITIALIZE_ARGS, 
        event = data_api.JobStartedEvent())
    job.register_task(initialize_task)
    
    print 'Develop task'
    develop_task = data_api.DataFlowTask(
        name = ss.DEVELOP_NAME,
        cmd_args = ss.DEVELOP_ARGS,
        condition = ss.DEVELOP_COND,
        input_size = ss.DEVELOP_INPUT_SIZE)
    job.register_task(develop_task)
    
    for i in range(len(ss.EVALUATE_NAMES)):
        print 'Evaluate area task'
        evaluate_area_task = data_api.DataFlowTask(
            name = ss.EVALUATE_NAMES[i],
            cmd_args = ss.EVALUATE_ARGS[i],
            condition = ss.EVALUATE_CONDS[i],
            input_size = ss.EVALUATE_INPUT_SIZES[i])
        job.register_task(evaluate_area_task)
    
    print 'Feedback task'
    feedback_task = data_api.DataFlowTask(
        name = ss.FEEDBACK_NAME,
        cmd_args = ss.FEEDBACK_ARGS, 
        condition = ss.FEEDBACK_COND,   
        input_size = ss.FEEDBACK_INPUT_SIZE)
    job.register_task(feedback_task)

    print 'Run job'
    job.run()

if __name__ == '__main__':
    main()
